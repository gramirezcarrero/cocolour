// Generated by CoffeeScript 1.7.1
(function() {
  var calcCenter, clustering, distance, hypot,
    __slice = [].slice;

  if (Math.hypot != null) {
    hypot = Math.hypot;
  } else {
    hypot = function() {
      var args, sum;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      sum = 0;
      sum = args.forEach(function(val) {
        return sum += val;
      });
      return Math.sqrt(sum);
    };
  }

  distance = function(p1, p2) {
    var delta, weights;
    weights = [1, 0.8, 0.8];
    delta = p1.map(function(val, i) {
      return (val - p2[i]) * weights[i];
    });
    return hypot.apply(this, delta);
  };

  calcCenter = function(points) {
    var H, L, S, atan, x, y;
    if (points.length === 0) {
      return null;
    }
    L = math.mean(points.map(function(point) {
      return point[2];
    }));
    x = math.mean(points.map(function(point) {
      var h, l, s;
      h = point[0], s = point[1], l = point[2];
      return s * math.cos(math.unit(h, 'deg'));
    }));
    y = math.mean(points.map(function(point) {
      var h, l, s;
      h = point[0], s = point[1], l = point[2];
      return s * math.sin(math.unit(h, 'deg'));
    }));
    S = Math.sqrt(x * x + y * y);
    atan = Math.atan(y / x);
    H = atan / Math.PI * 180;
    return [H, S, L].map(function(elem) {
      return parseInt(elem);
    });
  };

  clustering = function(points) {
    var centers, clusters, d, h, i, l, minDistance, minIndex, n, point, s, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _n, _ref, _ref1, _ref2;
    points = points.map(function(point) {
      var h, l, s;
      h = point[0], s = point[1], l = point[2];
      s *= 100;
      l *= 100;
      return [h, s, l];
    });
    n = 16;
    centers = [];
    clusters = [];
    _ref = [0, 45, 90, 135, 180, 225, 270, 315];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      h = _ref[_i];
      _ref1 = [50];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        s = _ref1[_j];
        _ref2 = [25, 75];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          l = _ref2[_k];
          centers.push([h, s, l]);
        }
      }
    }
    for (i = _l = 0; _l <= 15; i = ++_l) {
      clusters.push([]);
    }
    for (_m = 0, _len3 = points.length; _m < _len3; _m++) {
      point = points[_m];
      minIndex = 0;
      minDistance = null;
      for (i = _n = 0; _n <= 15; i = ++_n) {
        d = distance(centers[i], point);
        if ((minDistance == null) || (d < minDistance)) {
          minIndex = i;
          minDistance = d;
        }
      }
      clusters[minIndex].push([h, s, l]);
    }
    centers = clusters.map(function(cluster) {
      return calcCenter(cluster);
    });
    return console.log(centers);
  };

  window.clustering = clustering;

}).call(this);
